#!/usr/bin/env bash

# iTerm → Profiles → Text → use 14pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# fromhex converts a hex to its nearest 0-255 color index
# Use it like:
# $ fromhex 00fc7b
# 048
# $ fromhex #00fc7b
# 048
fromhex() {
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 +
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${2}${s}";
  else
    return;
  fi;
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);

  black=$(tput setaf 0);
  brightBlack=$(tput setaf 238);

  blue=$(tput setaf 32);
  brightBlue=$(tput setaf 45);

  cyan=$(tput setaf 6);
  brightCyan=$(tput setaf 14);

  green=$(tput setaf 34);
  brightGreen=$(tput setaf 46);

  orange=$(tput setaf 202);
  brightOrange=$(tput setaf 214);

  purple=$(tput setaf 91);
  brightPurple=$(tput setaf 177);

  red=$(tput setaf 198);
  brightRed=$(tput setaf 211);

  violet=$(tput setaf 62);
  brightViolet=$(tput setaf 105);

  white=$(tput setaf 248);
  brightWhite=$(tput setaf 15);

  yellow=$(tput setaf 220);
  brightYellow=$(tput setaf 226);
fi;

userStyle="${red}";

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${brightBlue}";
else
  hostStyle="${purple}";
fi;

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${brightWhite}\] at ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${brightWhite}\] in ";
PS1+="\[${violet}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${brightWhite}\] on \[${blue}\]\" \"\[${blue}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
